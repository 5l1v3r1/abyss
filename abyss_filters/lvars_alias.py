from abyss import abyss_filter_t
import ida_lines, ida_hexrays, ida_name

VAR_ASG_VAR_SUFFIX = "_"
VAR_ASG_CALL_PREFIX = "result_"

class asg_visitor_t(ida_hexrays.ctree_visitor_t):

    def __init__(self, cfunc):
        ida_hexrays.ctree_visitor_t.__init__(self, ida_hexrays.CV_FAST)
        self.cfunc = cfunc
        self.lvars = cfunc.get_lvars()

    def visit_expr(self, e):
        if e.op == ida_hexrays.cot_asg:
            # is x a var?
            if e.x.op == ida_hexrays.cot_var:
                # handle "x = y" types of assignments
                if e.y.op == ida_hexrays.cot_var:
                    # get variable indexes
                    x_idx = e.x.v.idx
                    y_idx = e.y.v.idx
                    # get lvar_t
                    var_x = self.lvars[x_idx]
                    var_y = self.lvars[y_idx]
                    # if x has an autogenerated name and y has a custom name
                    if not var_x.has_user_name and var_y.has_user_name:
                        # rename x
                        var_x.name = var_y.name + VAR_ASG_VAR_SUFFIX
                        var_x.set_user_name()
                # handle "x = y()" types of assignments
                elif e.y.op == ida_hexrays.cot_call:
                    # get name of called function
                    func_name = ida_lines.tag_remove(e.y.x.print1(None))
                    # get var index and lvar_t
                    x_idx = e.x.v.idx
                    var_x = self.lvars[x_idx]
                    if not var_x.has_user_name:
                        # rename x
                        var_x.name = VAR_ASG_CALL_PREFIX + func_name
                        var_x.set_user_name()
        return 0


class lvars_alias_t(abyss_filter_t):
    """example filter that shows how to rename/alias local variables
    used in assigment expressions.

    examples:
    'v11 = buf' becomes 'buf_ = buf'
    'v69 = strstr(a,b)' becomes 'result_strstr = strstr(a, b)'"""

    def process_printfunc(self, cfunc, printer):
        av = asg_visitor_t(cfunc)
        av.apply_to(cfunc.body, None)
        return 0

def FILTER_INIT():
    return lvars_alias_t()