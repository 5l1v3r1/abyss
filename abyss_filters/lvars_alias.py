from abyss import abyss_filter_t
import ida_lines, ida_hexrays

SUFFIX = "_"

class asg_visitor_t(ida_hexrays.ctree_visitor_t):

    def __init__(self, cfunc):
        ida_hexrays.ctree_visitor_t.__init__(self, ida_hexrays.CV_FAST)
        self.cfunc = cfunc
        self.lvars = cfunc.get_lvars()

    def visit_expr(self, e):
        if e.op == ida_hexrays.cot_asg:
            # we're interested in 'x = y' types of expressions
            if e.x.op == ida_hexrays.cot_var and e.y.op == ida_hexrays.cot_var:
                # get variable indexes
                x_idx = e.x.v.idx
                y_idx = e.y.v.idx
                # get lvar_t
                var_x = self.lvars[x_idx]
                var_y = self.lvars[y_idx]
                # if x has an autogenerated name and y has a custom name
                if not var_x.has_user_name and var_y.has_user_name:
                    # rename x
                    var_x.name = var_y.name + SUFFIX
                    var_x.set_user_name()
        return 0


class lvars_alias_t(abyss_filter_t):
    """example filter that shows how to rename/alias local variables
    used in assigment expressions.

    example: 'v11 = buf' will become 'buf_ = buf'"""

    def process_printfunc(self, cfunc, printer):
        av = asg_visitor_t(cfunc)
        av.apply_to(cfunc.body, None)
        return 0

def FILTER_INIT():
    return lvars_alias_t()